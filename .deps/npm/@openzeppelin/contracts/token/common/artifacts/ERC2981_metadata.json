{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "numerator",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "denominator",
						"type": "uint256"
					}
				],
				"name": "ERC2981InvalidDefaultRoyalty",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					}
				],
				"name": "ERC2981InvalidDefaultRoyaltyReceiver",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "numerator",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "denominator",
						"type": "uint256"
					}
				],
				"name": "ERC2981InvalidTokenRoyalty",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					}
				],
				"name": "ERC2981InvalidTokenRoyaltyReceiver",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "salePrice",
						"type": "uint256"
					}
				],
				"name": "royaltyInfo",
				"outputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information. Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first. Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the fee is specified in basis points by default. IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the ERC. Marketplaces are expected to voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.",
			"errors": {
				"ERC2981InvalidDefaultRoyalty(uint256,uint256)": [
					{
						"details": "The default royalty set is invalid (eg. (numerator / denominator) >= 1)."
					}
				],
				"ERC2981InvalidDefaultRoyaltyReceiver(address)": [
					{
						"details": "The default royalty receiver is invalid."
					}
				],
				"ERC2981InvalidTokenRoyalty(uint256,uint256,uint256)": [
					{
						"details": "The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1)."
					}
				],
				"ERC2981InvalidTokenRoyaltyReceiver(uint256,address)": [
					{
						"details": "The royalty receiver for `tokenId` is invalid."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"royaltyInfo(uint256,uint256)": {
					"details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange. NOTE: ERC-2981 allows setting the royalty to 100% of the price. In that case all the price would be sent to the royalty receiver and 0 tokens to the seller. Contracts dealing with royalty should consider empty transfers."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@openzeppelin/contracts/token/common/ERC2981.sol": "ERC2981"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@openzeppelin/contracts/interfaces/IERC2981.sol": {
			"keccak256": "0x3b017a19c1730050d0fdff8dfa9255741634699aa4217442724746ca49e13292",
			"license": "MIT",
			"urls": [
				"bzz-raw://05530a2959e8be01cd88993970924cd6081c3462395f6fc0e73c034519259b05",
				"dweb:/ipfs/QmXAG8dF9fiYE8iVWJYWxmbEMNL6RvBAxzRGq2nyLanB2M"
			]
		},
		".deps/npm/@openzeppelin/contracts/token/common/ERC2981.sol": {
			"keccak256": "0x01818908219f73eecfbbe8999ac583ee3fcbfe8e39e8e0a823199737d0ed8052",
			"license": "MIT",
			"urls": [
				"bzz-raw://674bafb0a373297befe1b5fe4f5a02cc18a305d8f9a4577deddc2030a611433e",
				"dweb:/ipfs/QmPq5sBp1upRbBVdU5kd1VyG4tHAbv9z6V1NSPuPs8vAtd"
			]
		},
		".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287",
				"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p"
			]
		},
		".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
				"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
			]
		}
	},
	"version": 1
}